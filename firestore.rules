rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /chats/{id} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    match /chats/{id} {
      allow read: if request.auth.uid in resource.data.between;
      allow create: if request.auth.uid in request.resource.data.between;
      allow update, delete: if resource.data.fromId == request.auth.uid;
    }

    match /courses/{id} {
      allow read: if isAuthenticated();
      allow create, delete: if isAdmin();
      allow update: if isAuthenticated();
    }

    match /courses/{course}/discussions/{id} {
      allow read: if hasAccessToCourse(course, request.auth.uid);
      allow create: if hasAccessToCourse(course, request.auth.uid);
      allow update: if resource.data.userId == request.auth.uid;
      allow delete: if isAdmin();
    }

    match /subjects/{id} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /questions/{id} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    match /sessions/{id} {
      allow read: if resource.data.studentId == request.auth.uid || resource.data.tutorId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update: if resource.data.studentId == request.auth.uid || resource.data.tutorId == request.auth.uid;
      allow delete: if isAdmin();
    }

    match /users/{id} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if request.auth.uid == id;
    }

    match /{document=**} {
      allow read, write: if false;
    }

    function isAuthenticated() {
      return true;
      //return request.auth != null;
    }

    function isAdmin() {
      return request.auth.token.isAdmin == true;
    }

    function isTutor() {
      return request.auth.token.isTutor == true;
    }

    function hasAccessToCourse(course, user) {
      return user in get(/databases/$(database)/documents/courses/$(course)).data.savedBy
    }
  }
}