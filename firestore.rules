rules_version = '2';
service cloud.firestore {
	match /databases/{database}/documents {
		match /chats/{path}/chats/{id} {
			allow read, update: if hasAccessToChat(path);
			allow create: if isMine(request.resource.data.from);
			allow delete: if isMine(resource.data.from);
		}

		match /courses/{id} {
			allow read: if isAuthenticated();
			allow create, delete: if isAdmin();
			allow update: if isAuthenticated();
		}

		match /courses/{course}/discussions/{id} {
			allow read: if hasAccessToCourse(course);
			allow create: if hasAccessToCourse(course);
			allow update: if isMine(resource.data.userId);
			allow delete: if isAdmin();
		}

		match /errors/types/emails/{id} {
            allow read: if isAdmin();
            allow create: if isAdmin();
            allow update: if isAdmin();
            allow delete: if isAdmin();
        }

		match /notes/{id} {
			allow read: if isAuthenticated();
			allow write: if isAdmin();
		}

		match /posts/{id} {
			allow read: if isAuthenticated();
			allow write: if isAdmin();
		}

		match /posts/{post}/replies/{id} {
            allow read: if isAuthenticated();
            allow write: if isAdmin();
        }

		match /sessions/{id} {
			allow read: if isAuthenticated();
			allow create: if isAuthenticated();
			allow update: if hasAccessToSession(id);
			allow delete: if isAdmin();
		}

		match /sessions/{session}/chats/{id} {
			allow read: if hasAccessToSession(session);
			allow create: if hasAccessToSession(session);
			allow update: if hasAccessToSession(session);
			allow delete: if isAdmin();
		}

		match /subjects/{id} {
			allow read: if isAuthenticated();
			allow write: if isAdmin();
		}

		match /tests/tutors/questions/{id} {
            allow read: if isAuthenticated();
            allow write: if isAdmin();
        }

		match /tests/tutors/tests/{id} {
			allow read: if isAdmin();
			allow create: if isAdmin();
			allow update, delete: if isAdmin();
		}

		match /users/{id} {
			allow read: if isAuthenticated();
			allow create: if isAuthenticated();
			allow update: if isMine(id);
			allow delete: if isAdmin();
		}

		match /users/{user}/transactions/{id} {
			allow read: if isMine(user);
			allow create: if isMine(user);
			allow update: if isMine(user);
			allow delete: if isAdmin();
		}

		match /users/{user}/paymentMethods/{id} {
			allow read: if isMine(user);
			allow create: if isMine(user);
			allow update: if isMine(user);
			allow delete: if isAdmin();
		}

		match /{document=**} {
			allow read, write: if false;
		}

		function isAuthenticated() {
			return true; //return request.auth != null;
		}

		function isAdmin() {
			return true; //request.auth.token.isAdmin == true;
		}

		function isMine(id) {
			return true; //request.auth.uid == id;
		}

		function hasAccessToCourse(course) {
			return true; //request.auth.uid in get(/databases/$(database)/documents/courses/$(course)).data.savedBy;
		}

		function hasAccessToSession(session) {
			let sessionData = get(/databases/$(database)/documents/sessions/$(session)).data;
			return true; //request.auth.uid == sessionData.tutor || request.auth.uid == sessionData.student;
		}

		function hasAccessToChat(path) {
			return true; //request.auth.uid in path.split('_');
		}
	}
}