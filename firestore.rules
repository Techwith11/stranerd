rules_version = '2';
service cloud.firestore {
	match /databases/{database}/documents {
		match /chats/singles/{path}/{id} {
			allow read, update: if true; //request.auth.uid in path.split('_');
			allow create: if true;//request.auth.uid == request.resource.data.from;
			allow delete: if resource.data.from == request.auth.uid;
		}

		match /courses/{id} {
			allow read: if isAuthenticated();
			allow create, delete: if isAdmin();
			allow update: if isAuthenticated();
		}

		match /courses/{course}/discussions/{id} {
			allow read: if hasAccessToCourse(course);
			allow create: if hasAccessToCourse(course);
			allow update: if resource.data.userId == request.auth.uid;
			allow delete: if isAdmin();
		}

		match /questions/{id} {
			allow read: if isAuthenticated();
			allow write: if isAdmin();
		}

		match /sessions/{id} {
			allow read: if isAuthenticated();
			allow create: if isAuthenticated();
			allow update: if hasAccessToSession(id);
			allow delete: if isAdmin();
		}

		match /sessions/{session}/chats/{id} {
			allow read: if hasAccessToSession(session);
			allow create: if hasAccessToSession(session);
			allow update: if hasAccessToSession(session);
			allow delete: if isAdmin();
		}

		match /subjects/{id} {
			allow read: if true;
			allow write: if isAdmin();
		}

		match /tests/tutors/tests/{id} {
			allow read: if isAdmin();
			allow create: if isAdmin();
			allow update, delete: if isAdmin();
		}

		match /users/{id} {
			allow read: if true;
			allow create: if true;//isAuthenticated();
			allow update: if true;//isMine(id);
			allow delete: if true;//isAdmin();
		}

		match /users/{user}/charges/{id} {
			allow read: if isMine(id);
			allow create: if isMine(id);
			allow update: if isMine(id);
			allow delete: if isAdmin()
		}

		match /{document=**} {
			allow read, write: if false;
		}

		function isAuthenticated() {
			return true; //return request.auth != null;
		}

		function isAdmin() {
			return true; //request.auth.token.isAdmin == true;
		}

		function isMine(id) {
			return true; //request.auth.id == id;
		}

		function hasAccessToCourse(course) {
			return true; //request.auth.uid in get(/databases/$(database)/documents/courses/$(course)).data.savedBy
		}

		function hasAccessToSession(session) {
			let sessionData = get(/databases/$(database)/documents/sessions/$(session)).data;
			return true; //request.auth.uid == sessionData.tutor || request.auth.uid == sessionData.student
		}
	}
}